@startuml
skinparam class {
BackgroundColor #ECECEC
ArrowColor Blue
BorderColor Blue
}
Class TransactionsService{
- _repo = TransactionRepository
GetTransactions()
GetTransactionById()
UpdateTransaction()
CreateTransaction()
GetTransactionByUserId()
GetBalanceByUserId()
GetStripeModel()
GetStripeToken()
CreatePaymentModel()
PostFundsStripe()
}
Interface ITransactionsRepository {
GetTransactionAsync()
GetTransactionByIdAsync()
GetTransactionByUserId()
GetBalanceByUserIdAsync()
}
class ParkService{
_repo = IParkRepository
FindAll()
GetParkById()
UpdatePark()
AddPark()
DeletePark()
}
Interface IParkRepository{
GetParkByIdAsync()
DeleteParkByIdAsync()
}
Class TransactionsRepository{
- context = ApplicationDbContext
GetTransactionsAsync()
GetTransactionByIdAsync()
GetTransactionsByUserId()
GetBalanceByUserIdAsync()
}
 entity Transaction{
- Id
-Date
-Value
-Balance
-TransactionTypeId
-TransactionType
-UserId
-User
}

 entity TransactionType{
-Id
-Name
}
Entity Reservation{
- Id
- ExternalId
- Start
- End
- DateCreated
- Value
- SlotId
- Locator
- Latitude
- Longitude
- QrCode
- AvailableToRent
- RentValue
- UserId
- ParkId
}

class ParkingLotService{
_parkingLotSecrets = ParkingLotSecrets
_repo = IParkRepository
GetAvaiable()
PostReservation()
CancelReservation()
}
Interface IParkingLotService{
GetAvaiable()
PostReservation()
CancelReservation()
}


Interface IParkRepository{
GetParkByIdAsync()
DeleteParkByIdAsync()
}

Class ParkRepository{
_context = ApplicationDbContext
GetAllParksAsync()
GetParkByIdAsync()
DeleteParkByIdAsync()
}


Class UserManager{}



Entity ReservationDTO{
- Start
- End
- DateCreated
- Value
- SlotId
- Locator
- Latitude
- Longitude
- ParkName
- UserId
- ExternalId
}

class ReservationsController{
_service = ReservationService
_parkingLotService = ParkingLotService
_parkService = ParkService
_userManager = UserManager<Entity>
_transactionService = TransactionService
GetReservations()
GetReservation()
GetAvailableSlotsToReservationDTO()
GetQrCodeInformation()
PutReservation()
PostReservation()
RentReservation()
RentedReservation()
DeleteReservation()
ReSendEmail()
}

class ReservationService {
_reservationRepo = IReservationRepository
_transactionRepo = ITransactionRepository
GetAllReservations()
GetReservationById()
UpdateReservation()
AddReservation()
DeleteReservationById()
GenerateQrCode()
GetQrCodeInformation()
RentReservation()
RentedReservation()
ReservationDTO2Reservation()
UserHasBalance()
GetRentReservations()
Reservation2ReservationDTO()
SendEmail()
FilterReservationByLocation()
}

Interface ReservationRepository{
GetAllReservationsAsync()
GetReservationByIdAsync()
DeleteReservationsbyIdAsync()
GetRentReservationsAsync()
}

class ReservationRepository{
_context = ApplicationDbContext
GetAllReservationsAsync()
GetReservationByIdAsync()
GetReservationsBySlotId()
DeleteReservationByIdAsync()
}


ReservationsController -> ReservationService
ReservationService -> ReservationRepository
ReservationsController --> IParkingLotService
IParkingLotService -> ParkingLotService
ParkingLotService -->IParkRepository
IParkRepository -> ParkRepository
ReservationsController --> ParkService
ParkService --> IParkRepository

TransactionsService <-- ReservationsController

TransactionsService -> ITransactionsRepository
ITransactionsRepository -> TransactionsRepository

UserManager <- ReservationsController
ITransactionsRepository <-- ReservationService
@enduml